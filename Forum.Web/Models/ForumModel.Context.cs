//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Forum.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ForumEntities : DbContext
    {
        public ForumEntities()
            : base("name=ForumEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Item> Items { get; set; }
        public DbSet<Topic> Topics { get; set; }
        public DbSet<TopicStatu> TopicStatus { get; set; }
        public DbSet<TopicUserAudit> TopicUserAudits { get; set; }
    
        public virtual ObjectResult<getTopicById> List_Topic(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTopicById>("List_Topic", userNameParameter);
        }
    
        public virtual int Add_Topic(string title, string description, string documentID, string createdBy, string spareField)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var documentIDParameter = documentID != null ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var spareFieldParameter = spareField != null ?
                new ObjectParameter("SpareField", spareField) :
                new ObjectParameter("SpareField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Topic", titleParameter, descriptionParameter, documentIDParameter, createdByParameter, spareFieldParameter);
        }
    
        public virtual int Add_Item(Nullable<int> topicID, string comment, string documentID, string createdBy)
        {
            var topicIDParameter = topicID.HasValue ?
                new ObjectParameter("TopicID", topicID) :
                new ObjectParameter("TopicID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var documentIDParameter = documentID != null ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Item", topicIDParameter, commentParameter, documentIDParameter, createdByParameter);
        }
    
        public virtual int Update_Topic(Nullable<int> topicID, string title, string description, string bugTicketId, string documentID, string spareField, Nullable<int> statusID, Nullable<bool> isActive)
        {
            var topicIDParameter = topicID.HasValue ?
                new ObjectParameter("TopicID", topicID) :
                new ObjectParameter("TopicID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bugTicketIdParameter = bugTicketId != null ?
                new ObjectParameter("BugTicketId", bugTicketId) :
                new ObjectParameter("BugTicketId", typeof(string));
    
            var documentIDParameter = documentID != null ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(string));
    
            var spareFieldParameter = spareField != null ?
                new ObjectParameter("SpareField", spareField) :
                new ObjectParameter("SpareField", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Topic", topicIDParameter, titleParameter, descriptionParameter, bugTicketIdParameter, documentIDParameter, spareFieldParameter, statusIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<getTopicById> Get_Topic_By_ID(Nullable<int> topicID, string userName)
        {
            var topicIDParameter = topicID.HasValue ?
                new ObjectParameter("TopicID", topicID) :
                new ObjectParameter("TopicID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTopicById>("Get_Topic_By_ID", topicIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<ListTopicUserAudit> List_TopicUserAudit(Nullable<int> topicID)
        {
            var topicIDParameter = topicID.HasValue ?
                new ObjectParameter("TopicID", topicID) :
                new ObjectParameter("TopicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListTopicUserAudit>("List_TopicUserAudit", topicIDParameter);
        }
    }
}
